In React, `useReducer` is a hook that is used for state management in complex state logic scenarios. It's an alternative to `useState` when you have more complex state transitions. `useReducer` is particularly useful when:

- You have state logic that involves multiple sub-values.
- The next state depends on the previous state.
- You find `useState` doesn't scale well for the complexity of your state management.

Here's a basic example of how to use `useReducer`:

### Syntax

```javascript
const [state, dispatch] = useReducer(reducer, initialArg, init);
```

- `reducer` is a function that determines the new state based on the action.
- `initialArg` is the initial state.
- `init` is an optional function to initialize the state lazily.

### Example

Let's create a simple counter example with `useReducer`.

#### Step 1: Define the reducer function

```javascript
const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    case 'reset':
      return initialState;
    default:
      throw new Error();
  }
}
```

#### Step 2: Use the reducer in a component

```javascript
import React, { useReducer } from 'react';

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
    </div>
  );
}

export default Counter;
```

In this example:
- We define a `reducer` function that handles the logic for different actions (`increment`, `decrement`, `reset`).
- We use the `useReducer` hook inside the `Counter` component, passing the `reducer` and the `initialState`.
- We call `dispatch` with an action to update the state.

### Advantages of `useReducer`
- It's more predictable and testable than `useState` for complex state logic.
- It keeps related logic together, making the code easier to understand and maintain.
- It works well with `Context` to manage state globally in a React application.

For more complex applications, you might also consider combining `useReducer` with `useContext` to manage global state efficiently.